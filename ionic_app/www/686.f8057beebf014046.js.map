{"version":3,"file":"686.f8057beebf014046.js","mappings":"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","names":["_polyfillHost","_polyfillSlotted","_polyfillHostContext","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinator","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_polyfillHostRe","createSupportsRuleRe","selector","_colonSlottedRe","_colonHostRe","_colonHostContextRe","_commentRe","_commentWithHashRe","_ruleRe","_curlyRe","_selectorPartsRe","BLOCK_PLACEHOLDER","processRules","input","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedString","replace","m","content","suffix","contentPrefix","startsWith","blocks","substring","rule","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","length","part","push","join","convertColonRule","cssText","regExp","partReplacer","parts","r","i","p","trim","colonHostPartReplacer","host","colonHostContextPartReplacer","indexOf","injectScopingSelector","scopingSelector","_","before","_colonGroup","colon","after","scopeSelectors","scopeSelectorText","hostSelector","slotSelector","commentOriginalSelector","scopeSelector","map","shallowPart","selectorNeedsScoping","makeScopeMatcher","test","applyStrictSelectorScope","className","_scopeSelectorPart","scopedP","applySimpleSelectorScope","lastIndex","replaceBy","t","safeContent","placeholders","index","keep","pseudo","exp","safeSelector","res","scopedSelector","startIndex","sep","shouldScope","exec","separator","slice","restoreSafeSelector","scopeCss","scopeId","hostScopeId","slotScopeId","commentsWithHash","match","extractCommentsWithHash","stripComments","orgSelectors","processCommentedSelector","placeholder","comment","scoped","scopeCssText","slotted","convertColonSlotted","slotClass","selectors","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","trimRight","updatedSelector","convertColonHostContext","convertColonHost","insertPolyfillHostInCssText","reduce","result","pattern","convertShadowDOMSelectors","slottedSelectors","forEach"],"sourceRoot":"webpack:///","sources":["./node_modules/@stencil/core/internal/client/shadow-css.js"],"sourcesContent":["/*\n Stencil Client Platform v4.7.0 | MIT Licensed | https://stenciljs.com\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from `webcomponents.js` to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nconst safeSelector = (selector) => {\n    const placeholders = [];\n    let index = 0;\n    // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(keep);\n        index++;\n        return replaceBy;\n    });\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n    const content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(exp);\n        index++;\n        return pseudo + replaceBy;\n    });\n    const ss = {\n        content,\n        placeholders,\n    };\n    return ss;\n};\nconst restoreSafeSelector = (placeholders, content) => {\n    return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\n};\nconst _polyfillHost = '-shadowcsshost';\nconst _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nconst _polyfillHostContext = '-shadowcsscontext';\nconst _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nconst _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nconst _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nconst _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\nconst _polyfillHostRe = /-shadowcsshost/gim;\n/**\n * Little helper for generating a regex that will match a specified\n * CSS selector when that selector is _not_ a part of a `@supports` rule.\n *\n * The pattern will match the provided `selector` (i.e. ':host', ':host-context', etc.)\n * when that selector is not a part of a `@supports` selector rule _or_ if the selector\n * is a part of the rule's declaration.\n *\n * For instance, if we create the regex with the selector ':host-context':\n * - '@supports selector(:host-context())' will return no matches (starts with '@supports')\n * - '@supports selector(:host-context()) { :host-context() { ... }}' will match the second ':host-context' (part of declaration)\n * - ':host-context() { ... }' will match ':host-context' (selector is not a '@supports' rule)\n * - ':host() { ... }' will return no matches (selector doesn't match selector used to create regex)\n *\n * @param selector The CSS selector we want to match for replacement\n * @returns A look-behind regex containing the selector\n */\nconst createSupportsRuleRe = (selector) => new RegExp(`((?<!(^@supports(.*)))|(?<=\\{.*))(${selector}\\\\b)`, 'gim');\nconst _colonSlottedRe = createSupportsRuleRe('::slotted');\nconst _colonHostRe = createSupportsRuleRe(':host');\nconst _colonHostContextRe = createSupportsRuleRe(':host-context');\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nconst stripComments = (input) => {\n    return input.replace(_commentRe, '');\n};\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nconst extractCommentsWithHash = (input) => {\n    return input.match(_commentWithHashRe) || [];\n};\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nconst _curlyRe = /([{}])/g;\nconst _selectorPartsRe = /(^.*?[^\\\\])??((:+)(.*)|$)/;\nconst OPEN_CURLY = '{';\nconst CLOSE_CURLY = '}';\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\nconst processRules = (input, ruleCallback) => {\n    const inputWithEscapedBlocks = escapeBlocks(input);\n    let nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n        const selector = m[2];\n        let content = '';\n        let suffix = m[4];\n        let contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        const cssRule = {\n            selector,\n            content,\n        };\n        const rule = ruleCallback(cssRule);\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n    });\n};\nconst escapeBlocks = (input) => {\n    const inputParts = input.split(_curlyRe);\n    const resultParts = [];\n    const escapedBlocks = [];\n    let bracketCount = 0;\n    let currentBlockParts = [];\n    for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        const part = inputParts[partIndex];\n        if (part === CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part === OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    const strEscapedBlocks = {\n        escapedString: resultParts.join(''),\n        blocks: escapedBlocks,\n    };\n    return strEscapedBlocks;\n};\n/**\n * Replaces certain strings within the CSS with placeholders\n * that will later be replaced with class selectors appropriate\n * for the level of encapsulation (shadow or scoped).\n *\n * When performing these replacements, we want to ignore selectors that are a\n * part of an `@supports` rule. Replacing these selectors will result in invalid\n * CSS that gets passed to autoprefixer/postcss once the placeholders are replaced.\n * For example, a rule like:\n *\n * ```css\n * @supports selector(:host()) {\n *   :host {\n *     color: red;\n *   }\n * }\n * ```\n *\n * Should be converted to:\n *\n * ```css\n * @supports selector(:host()) {\n *   -shadowcsshost {\n *     color: red;\n *   }\n * }\n * ```\n *\n * The order the regex replacements happen in matters since we match\n * against a whole selector word so we need to match all of `:host-context`\n * before we try to replace `:host`. Otherwise the pattern for `:host` would match\n * `:host-context` resulting in something like `:-shadowcsshost-context`.\n *\n * @param cssText A CSS string for a component\n * @returns The modified CSS string\n */\nconst insertPolyfillHostInCssText = (cssText) => {\n    // These replacements use a special syntax with the `$1`. When the replacement\n    // occurs, `$1` maps to the content of the string leading up to the selector\n    // to be replaced.\n    //\n    // Otherwise, we will replace all the preceding content in addition to the\n    // selector because of the lookbehind in the regex.\n    //\n    // e.g. `/*!@___0___*/:host {}` => `/*!@___0___*/--shadowcsshost {}`\n    cssText = cssText\n        .replace(_colonHostContextRe, `$1${_polyfillHostContext}`)\n        .replace(_colonHostRe, `$1${_polyfillHost}`)\n        .replace(_colonSlottedRe, `$1${_polyfillSlotted}`);\n    return cssText;\n};\nconst convertColonRule = (cssText, regExp, partReplacer) => {\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n    return cssText.replace(regExp, (...m) => {\n        if (m[2]) {\n            const parts = m[2].split(',');\n            const r = [];\n            for (let i = 0; i < parts.length; i++) {\n                const p = parts[i].trim();\n                if (!p)\n                    break;\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n            }\n            return r.join(',');\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n};\nconst colonHostPartReplacer = (host, part, suffix) => {\n    return host + part.replace(_polyfillHost, '') + suffix;\n};\nconst convertColonHost = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nconst colonHostContextPartReplacer = (host, part, suffix) => {\n    if (part.indexOf(_polyfillHost) > -1) {\n        return colonHostPartReplacer(host, part, suffix);\n    }\n    else {\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\n    }\n};\nconst convertColonSlotted = (cssText, slotScopeId) => {\n    const slotClass = '.' + slotScopeId + ' > ';\n    const selectors = [];\n    cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\n        if (m[2]) {\n            const compound = m[2].trim();\n            const suffix = m[3];\n            const slottedSelector = slotClass + compound + suffix;\n            let prefixSelector = '';\n            for (let i = m[4] - 1; i >= 0; i--) {\n                const char = m[5][i];\n                if (char === '}' || char === ',') {\n                    break;\n                }\n                prefixSelector = char + prefixSelector;\n            }\n            const orgSelector = prefixSelector + slottedSelector;\n            const addedSelector = `${prefixSelector.trimRight()}${slottedSelector.trim()}`;\n            if (orgSelector.trim() !== addedSelector.trim()) {\n                const updatedSelector = `${addedSelector}, ${orgSelector}`;\n                selectors.push({\n                    orgSelector,\n                    updatedSelector,\n                });\n            }\n            return slottedSelector;\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n    return {\n        selectors,\n        cssText,\n    };\n};\nconst convertColonHostContext = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nconst convertShadowDOMSelectors = (cssText) => {\n    return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\n};\nconst makeScopeMatcher = (scopeSelector) => {\n    const lre = /\\[/g;\n    const rre = /\\]/g;\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\nconst selectorNeedsScoping = (selector, scopeSelector) => {\n    const re = makeScopeMatcher(scopeSelector);\n    return !re.test(selector);\n};\nconst injectScopingSelector = (selector, scopingSelector) => {\n    return selector.replace(_selectorPartsRe, (_, before = '', _colonGroup, colon = '', after = '') => {\n        return before + scopingSelector + colon + after;\n    });\n};\nconst applySimpleSelectorScope = (selector, scopeSelector, hostSelector) => {\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n    _polyfillHostRe.lastIndex = 0;\n    if (_polyfillHostRe.test(selector)) {\n        const replaceBy = `.${hostSelector}`;\n        return selector\n            .replace(_polyfillHostNoCombinatorRe, (_, selector) => injectScopingSelector(selector, replaceBy))\n            .replace(_polyfillHostRe, replaceBy + ' ');\n    }\n    return scopeSelector + ' ' + selector;\n};\nconst applyStrictSelectorScope = (selector, scopeSelector, hostSelector) => {\n    const isRe = /\\[is=([^\\]]*)\\]/g;\n    scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\n    const className = '.' + scopeSelector;\n    const _scopeSelectorPart = (p) => {\n        let scopedP = p.trim();\n        if (!scopedP) {\n            return '';\n        }\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n        }\n        else {\n            // remove :host since it should be unnecessary\n            const t = p.replace(_polyfillHostRe, '');\n            if (t.length > 0) {\n                scopedP = injectScopingSelector(t, className);\n            }\n        }\n        return scopedP;\n    };\n    const safeContent = safeSelector(selector);\n    selector = safeContent.content;\n    let scopedSelector = '';\n    let startIndex = 0;\n    let res;\n    const sep = /( |>|\\+|~(?!=))\\s*/g;\n    // If a selector appears before :host it should not be shimmed as it\n    // matches on ancestor elements and not on elements in the host's shadow\n    // `:host-context(div)` is transformed to\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n    // Historically `component-tag:host` was matching the component so we also want to preserve\n    // this behavior to avoid breaking legacy apps (it should not match).\n    // The behavior should be:\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n    //   `:host-context(tag)`)\n    const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n    let shouldScope = !hasHost;\n    while ((res = sep.exec(selector)) !== null) {\n        const separator = res[1];\n        const part = selector.slice(startIndex, res.index).trim();\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n        const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\n        scopedSelector += `${scopedPart} ${separator} `;\n        startIndex = sep.lastIndex;\n    }\n    const part = selector.substring(startIndex);\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n    // replace the placeholders with their original values\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nconst scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\n    return selector\n        .split(',')\n        .map((shallowPart) => {\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n            return shallowPart.trim();\n        }\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n        }\n        else {\n            return shallowPart.trim();\n        }\n    })\n        .join(', ');\n};\nconst scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\n    return processRules(cssText, (rule) => {\n        let selector = rule.selector;\n        let content = rule.content;\n        if (rule.selector[0] !== '@') {\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n        }\n        else if (rule.selector.startsWith('@media') ||\n            rule.selector.startsWith('@supports') ||\n            rule.selector.startsWith('@page') ||\n            rule.selector.startsWith('@document')) {\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n        }\n        const cssRule = {\n            selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n            content,\n        };\n        return cssRule;\n    });\n};\nconst scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\n    cssText = insertPolyfillHostInCssText(cssText);\n    cssText = convertColonHost(cssText);\n    cssText = convertColonHostContext(cssText);\n    const slotted = convertColonSlotted(cssText, slotScopeId);\n    cssText = slotted.cssText;\n    cssText = convertShadowDOMSelectors(cssText);\n    if (scopeId) {\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n    }\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n    return {\n        cssText: cssText.trim(),\n        slottedSelectors: slotted.selectors,\n    };\n};\nconst scopeCss = (cssText, scopeId, commentOriginalSelector) => {\n    const hostScopeId = scopeId + '-h';\n    const slotScopeId = scopeId + '-s';\n    const commentsWithHash = extractCommentsWithHash(cssText);\n    cssText = stripComments(cssText);\n    const orgSelectors = [];\n    if (commentOriginalSelector) {\n        const processCommentedSelector = (rule) => {\n            const placeholder = `/*!@___${orgSelectors.length}___*/`;\n            const comment = `/*!@${rule.selector}*/`;\n            orgSelectors.push({ placeholder, comment });\n            rule.selector = placeholder + rule.selector;\n            return rule;\n        };\n        cssText = processRules(cssText, (rule) => {\n            if (rule.selector[0] !== '@') {\n                return processCommentedSelector(rule);\n            }\n            else if (rule.selector.startsWith('@media') ||\n                rule.selector.startsWith('@supports') ||\n                rule.selector.startsWith('@page') ||\n                rule.selector.startsWith('@document')) {\n                rule.content = processRules(rule.content, processCommentedSelector);\n                return rule;\n            }\n            return rule;\n        });\n    }\n    const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n    cssText = [scoped.cssText, ...commentsWithHash].join('\\n');\n    if (commentOriginalSelector) {\n        orgSelectors.forEach(({ placeholder, comment }) => {\n            cssText = cssText.replace(placeholder, comment);\n        });\n    }\n    scoped.slottedSelectors.forEach((slottedSelector) => {\n        cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\n    });\n    return cssText;\n};\n\nexport { scopeCss };\n"],"x_google_ignoreList":[0]}